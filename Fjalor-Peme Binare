/*
Te shkruhet nje program qe lexon nje skedar text me madhesi te konsiderueshme dhe shfaq vetem njehere te gjitha
fjalet e vecante qe shfaqen ne te. Gjate leximit te skedarit, programi duhet te krijoje nje fjalor me te gjitha fjalet qe
jane shfaqur ne skedar. Sa here qe shfaqet nje fjale e re, dmth qe nuk ndodhet ne fjalor, programi duhet ta shtoje ate
ne fjalor.

ME PEME BINARE:

KOMPLEKSITETI:
-shtimi / add: 1+2+2+2+2+1+1+2+2+n+(n-1)+(n-1)+1+(n-1)+1+1+1+1=3n+17 = O(n);
-alreadyExist: 1+1+1+1+1+logn+1+1+logn+1=2logn+8 = O(logn);
-heqja e pikesimit / removePunct: 2+n+(n-1)+(n-1)+1+1+1=3n+3 = O(logn)
-print: 1+1+logn+2+logn=2logn+3 = O(logn);
-main: 2+1+1+1+1+n*((3n+3)+(2logn+8)+3n+17)+2logn+3 = O(n^2)

1. 100 fjale: 0.108s
2. 1000 fjale: 0.3202s
3. 100000 fjale: 2.166s
4. 1000000 fjale: 18.81s
*/

#include <iostream>
#include <fstream>
#include <string>
using namespace std;

//deklaroj strukturen e pemes binare
typedef struct tree{
	string word;
	struct tree* right;
	struct tree* left;
};

//kontrolloj nqs fjala gjendet me pare ne peme me rekursion
bool alreadyExist(tree*root, string s){
	if(root==NULL)return false;
	if(root->word==s)return true;
	
	bool a=alreadyExist(root->left,s);
	if(a)return true;
	
	bool b=alreadyExist(root->right,s);
	return b;
}

//funksion qe deklaron elementin e ri dhe e shton ne peme
tree* add(tree*root, string s){
	tree*p;
	p=new tree;
    p->word=s;
    p->right=NULL;
    p->left=NULL;

    if(root==NULL)return p;
    
    tree*parent = NULL;
    tree*current = root;
    while(current!=NULL){
    	parent=current;
	//kontrollojme nese elementi ndodhet ne te majte apo ne te djathte te cdo elementi per te gjetur ku do vendoset
    	if(current->word<s)current=current->right;
    	else{
    		current=current->left;
		}
	}
		if(parent->word<s){
			parent->right=p;
		}
		else{
			parent->left=p;
		}
    return root;//kthejme rrenjen
}

//funksion ndihmes per te hequr shenjat e pikesimit dhe per te bere fjalet lowercase 
//ne menyre qe mos te perseriten ne forma te ndryshme
string removePunct(string s){
	int len=s.size();
	for(int i=0; i<len; i++){
        s[i]= (tolower(s[i]));
        if (ispunct(s[i]))
        {
            s.erase(i--, 1);
            len = s.size();
        }
    }
    return s;
}

//funksion per te printuar pemen ne menyre nderrendore
void print(tree*root){
	if(root==NULL)return;
	print(root->left);
	cout<<root->word<<endl;
	print(root->right);
}

int main(int argc, char** argv) {
	cout<<"Ky program merr emrin e nje skedari dhe formon nje fjalor me peme binare me te gjitha fjalet e skedarit te perseritura nga nje here."<<endl;
	cout<<"Ju lutem jepni emrin e skedarit me prapashtesen .txt"<<endl;
	
	//deklaroj skedarin dhe marr emrin e skedarit input nga perdoruesi
	string fileName, item;
	cin>>fileName;
	ifstream input;
	input.open(fileName);
	
	//deklaroj pemen ku do ruhen fjalet e fjalorit
	tree*root = new tree;
	root = NULL;
	
	if(!input.is_open()){//rasti i gabimit ne hapjen e skedarit
		cout<<"Gabim ne hapjen e skedarit!"<<endl;
	}
	else{
		while(input>>item){//per sa kohe kemi fjale ne skedar
			item=removePunct(item); //pastrojme fjalen
			if(!alreadyExist(root,item)){ //nqs nuk gjendej me pare ne peme
				root=add(root,item); //e shtojme ne peme
			}
		}
	}
	//printojme pemen
	print(root);
	return 0;
}
