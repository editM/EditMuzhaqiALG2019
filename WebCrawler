package webCrawl;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

public class WebCrawler{
	
  private static final int MAX_PAGES_TO_SEARCH = 10;
  private Set<String> visitedPages = new HashSet<String>();
  private List<String> pagesToVisit = new LinkedList<String>();
 
  

  /**
   * Our main launching point for the Spider's functionality. Internally it creates spider legs
   * that make an HTTP request and parse the response (the web page).
   * 
   * @param url
   *            - The starting point of the spider
   * @param searchWord
   *            - The word or string that you are searching for
 * @throws IOException 
   */
  public void search(String URL, int depth, String directory) throws IOException{
	  
      while(this.visitedPages.size() < MAX_PAGES_TO_SEARCH){
    	  
          String currentURL;
          SpiderLeg leg = new SpiderLeg();
          if(this.pagesToVisit.isEmpty())
          {
              currentURL = URL;
              FileWriter fw = new FileWriter(directory+".txt", true);
          	
      	    BufferedWriter bw = new BufferedWriter(fw);
      	    bw.write(URL);
      	    bw.newLine();
      	    bw.close();
              this.visitedPages.add(URL);
          }
          else{
        	  
              currentURL = this.nextURL();
          }
          leg.crawl(currentURL,directory); //
          
          this.pagesToVisit.addAll(leg.getLinks());
      }
      System.out.println("\n Fundi i operimit: U vizituan " + this.visitedPages.size() + " faqe");
  }


  /**
   * Returns the next URL to visit (in the order that they were found). We also do a check to make
   * sure this method doesn't return a URL that has already been visited.
   * 
   * @return
 * @throws IOException 
   */
  private String nextURL() throws IOException{
	  
      String nextURL;
      do{
          nextURL = this.pagesToVisit.remove(0);
      } 
      while(this.visitedPages.contains(nextURL));
      this.visitedPages.add(nextURL);
      
    return nextURL;
  }
}
